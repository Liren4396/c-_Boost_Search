// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: saved_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_saved_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_saved_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_saved_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_saved_5fdata_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_saved_5fdata_2eproto;
namespace Saved_data {
class Saved_data;
struct Saved_dataDefaultTypeInternal;
extern Saved_dataDefaultTypeInternal _Saved_data_default_instance_;
class Saved_datas;
struct Saved_datasDefaultTypeInternal;
extern Saved_datasDefaultTypeInternal _Saved_datas_default_instance_;
}  // namespace Saved_data
PROTOBUF_NAMESPACE_OPEN
template<> ::Saved_data::Saved_data* Arena::CreateMaybeMessage<::Saved_data::Saved_data>(Arena*);
template<> ::Saved_data::Saved_datas* Arena::CreateMaybeMessage<::Saved_data::Saved_datas>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Saved_data {

// ===================================================================

class Saved_data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Saved_data.Saved_data) */ {
 public:
  inline Saved_data() : Saved_data(nullptr) {}
  ~Saved_data() override;
  explicit PROTOBUF_CONSTEXPR Saved_data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Saved_data(const Saved_data& from);
  Saved_data(Saved_data&& from) noexcept
    : Saved_data() {
    *this = ::std::move(from);
  }

  inline Saved_data& operator=(const Saved_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Saved_data& operator=(Saved_data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Saved_data& default_instance() {
    return *internal_default_instance();
  }
  static inline const Saved_data* internal_default_instance() {
    return reinterpret_cast<const Saved_data*>(
               &_Saved_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Saved_data& a, Saved_data& b) {
    a.Swap(&b);
  }
  inline void Swap(Saved_data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Saved_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Saved_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Saved_data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Saved_data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Saved_data& from) {
    Saved_data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Saved_data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Saved_data.Saved_data";
  }
  protected:
  explicit Saved_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kDescFieldNumber = 2,
    kUrlFieldNumber = 3,
    kIdFieldNumber = 4,
    kWeightFieldNumber = 5,
  };
  // string title = 1;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // bytes desc = 2;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // string url = 3;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // uint64 id = 4;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint64 weight = 5;
  void clear_weight();
  uint64_t weight() const;
  void set_weight(uint64_t value);
  private:
  uint64_t _internal_weight() const;
  void _internal_set_weight(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Saved_data.Saved_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    uint64_t id_;
    uint64_t weight_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_saved_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Saved_datas final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Saved_data.Saved_datas) */ {
 public:
  inline Saved_datas() : Saved_datas(nullptr) {}
  ~Saved_datas() override;
  explicit PROTOBUF_CONSTEXPR Saved_datas(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Saved_datas(const Saved_datas& from);
  Saved_datas(Saved_datas&& from) noexcept
    : Saved_datas() {
    *this = ::std::move(from);
  }

  inline Saved_datas& operator=(const Saved_datas& from) {
    CopyFrom(from);
    return *this;
  }
  inline Saved_datas& operator=(Saved_datas&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Saved_datas& default_instance() {
    return *internal_default_instance();
  }
  static inline const Saved_datas* internal_default_instance() {
    return reinterpret_cast<const Saved_datas*>(
               &_Saved_datas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Saved_datas& a, Saved_datas& b) {
    a.Swap(&b);
  }
  inline void Swap(Saved_datas* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Saved_datas* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Saved_datas* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Saved_datas>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Saved_datas& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Saved_datas& from) {
    Saved_datas::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Saved_datas* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Saved_data.Saved_datas";
  }
  protected:
  explicit Saved_datas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .Saved_data.Saved_data data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::Saved_data::Saved_data* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Saved_data::Saved_data >*
      mutable_data();
  private:
  const ::Saved_data::Saved_data& _internal_data(int index) const;
  ::Saved_data::Saved_data* _internal_add_data();
  public:
  const ::Saved_data::Saved_data& data(int index) const;
  ::Saved_data::Saved_data* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Saved_data::Saved_data >&
      data() const;

  // @@protoc_insertion_point(class_scope:Saved_data.Saved_datas)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Saved_data::Saved_data > data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_saved_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Saved_data

// string title = 1;
inline void Saved_data::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Saved_data::title() const {
  // @@protoc_insertion_point(field_get:Saved_data.Saved_data.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Saved_data::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Saved_data.Saved_data.title)
}
inline std::string* Saved_data::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:Saved_data.Saved_data.title)
  return _s;
}
inline const std::string& Saved_data::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Saved_data::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Saved_data::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Saved_data::release_title() {
  // @@protoc_insertion_point(field_release:Saved_data.Saved_data.title)
  return _impl_.title_.Release();
}
inline void Saved_data::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Saved_data.Saved_data.title)
}

// bytes desc = 2;
inline void Saved_data::clear_desc() {
  _impl_.desc_.ClearToEmpty();
}
inline const std::string& Saved_data::desc() const {
  // @@protoc_insertion_point(field_get:Saved_data.Saved_data.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Saved_data::set_desc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.desc_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Saved_data.Saved_data.desc)
}
inline std::string* Saved_data::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:Saved_data.Saved_data.desc)
  return _s;
}
inline const std::string& Saved_data::_internal_desc() const {
  return _impl_.desc_.Get();
}
inline void Saved_data::_internal_set_desc(const std::string& value) {
  
  _impl_.desc_.Set(value, GetArenaForAllocation());
}
inline std::string* Saved_data::_internal_mutable_desc() {
  
  return _impl_.desc_.Mutable(GetArenaForAllocation());
}
inline std::string* Saved_data::release_desc() {
  // @@protoc_insertion_point(field_release:Saved_data.Saved_data.desc)
  return _impl_.desc_.Release();
}
inline void Saved_data::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  _impl_.desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Saved_data.Saved_data.desc)
}

// string url = 3;
inline void Saved_data::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& Saved_data::url() const {
  // @@protoc_insertion_point(field_get:Saved_data.Saved_data.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Saved_data::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Saved_data.Saved_data.url)
}
inline std::string* Saved_data::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:Saved_data.Saved_data.url)
  return _s;
}
inline const std::string& Saved_data::_internal_url() const {
  return _impl_.url_.Get();
}
inline void Saved_data::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* Saved_data::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* Saved_data::release_url() {
  // @@protoc_insertion_point(field_release:Saved_data.Saved_data.url)
  return _impl_.url_.Release();
}
inline void Saved_data::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Saved_data.Saved_data.url)
}

// uint64 id = 4;
inline void Saved_data::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t Saved_data::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t Saved_data::id() const {
  // @@protoc_insertion_point(field_get:Saved_data.Saved_data.id)
  return _internal_id();
}
inline void Saved_data::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void Saved_data::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Saved_data.Saved_data.id)
}

// uint64 weight = 5;
inline void Saved_data::clear_weight() {
  _impl_.weight_ = uint64_t{0u};
}
inline uint64_t Saved_data::_internal_weight() const {
  return _impl_.weight_;
}
inline uint64_t Saved_data::weight() const {
  // @@protoc_insertion_point(field_get:Saved_data.Saved_data.weight)
  return _internal_weight();
}
inline void Saved_data::_internal_set_weight(uint64_t value) {
  
  _impl_.weight_ = value;
}
inline void Saved_data::set_weight(uint64_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:Saved_data.Saved_data.weight)
}

// -------------------------------------------------------------------

// Saved_datas

// repeated .Saved_data.Saved_data data = 1;
inline int Saved_datas::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int Saved_datas::data_size() const {
  return _internal_data_size();
}
inline void Saved_datas::clear_data() {
  _impl_.data_.Clear();
}
inline ::Saved_data::Saved_data* Saved_datas::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:Saved_data.Saved_datas.data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Saved_data::Saved_data >*
Saved_datas::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Saved_data.Saved_datas.data)
  return &_impl_.data_;
}
inline const ::Saved_data::Saved_data& Saved_datas::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::Saved_data::Saved_data& Saved_datas::data(int index) const {
  // @@protoc_insertion_point(field_get:Saved_data.Saved_datas.data)
  return _internal_data(index);
}
inline ::Saved_data::Saved_data* Saved_datas::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::Saved_data::Saved_data* Saved_datas::add_data() {
  ::Saved_data::Saved_data* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:Saved_data.Saved_datas.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Saved_data::Saved_data >&
Saved_datas::data() const {
  // @@protoc_insertion_point(field_list:Saved_data.Saved_datas.data)
  return _impl_.data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Saved_data

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_saved_5fdata_2eproto
